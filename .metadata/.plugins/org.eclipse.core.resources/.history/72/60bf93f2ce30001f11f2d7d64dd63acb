package dao;

import java.sql.*;

import entities.Usuario;
import enums.TipoStatus;

public class UsuarioDAO {

	private Connection conn;

    public UsuarioDAO(Connection conn) {
        this.conn = conn;
    }
	
    public void cadastrar(Usuario usuario) throws SQLException {
        PreparedStatement st = null;
        
        try {
            st = conn.prepareStatement("INSERT INTO usuario (nome, email, data_nascimento, genero, foto, senha, status) VALUES (?, ?, ?, ?, ?, ?, ?)");
            
            st.setString(1, usuario.getNome());
            st.setString(2, usuario.getEmail());
            st.setString(3, usuario.getDataNascimento());
            st.setString(4, usuario.getGenero());
            st.setString(5, usuario.getFoto());
            st.setString(6, usuario.getSenha());
            st.setString(7, usuario.getStatus().name());
            
            st.executeUpdate();
        } finally {
            BancoDados.finalizarStatement(st);
            BancoDados.desconectar();
        }
    }

    public Usuario buscarPorId(int id) throws SQLException {
        PreparedStatement st = null;
        ResultSet rs = null;
        
        try {
            st = conn.prepareStatement("SELECT * FROM usuario WHERE id = ?");
            st.setInt(1, id);
            
            rs = st.executeQuery();
            
            if (rs.next()) {
                Usuario usuario = new Usuario();
                usuario.setId(rs.getInt("id"));
                usuario.setNome(rs.getString("nome"));
                usuario.setEmail(rs.getString("email"));
                usuario.setDataNascimento(rs.getString("data_nascimento"));
                usuario.setGenero(rs.getString("genero"));
                usuario.setFoto(rs.getString("foto"));
                usuario.setSenha(rs.getString("senha"));
                usuario.setStatus(TipoStatus.valueOf(rs.getString("status")));
                return usuario;
            }
            return null;
        } finally {
            BancoDados.finalizarStatement(st);
            BancoDados.finalizarResultSet(rs);
            BancoDados.desconectar();
        }
    }

    public void atualizar(Usuario usuario) throws SQLException {
        PreparedStatement st = null;
        try {
            st = conn.prepareStatement("UPDATE usuario SET nome = ?, email = ?, data_nascimento = ?, genero = ?, foto = ?, senha = ?, status = ? WHERE id = ?");
            st.setString(1, usuario.getNome());
            st.setString(2, usuario.getEmail());
            st.setString(3, usuario.getDataNascimento());
            st.setString(4, usuario.getGenero());
            st.setString(5, usuario.getFoto());
            st.setString(6, usuario.getSenha());
            st.setString(7, usuario.getStatus().name());
            st.setInt(8, usuario.getId());
            st.executeUpdate();
        } finally {
            BancoDados.finalizarStatement(st);
            BancoDados.desconectar();
        }
    }

    public void excluir(int id) throws SQLException {
        PreparedStatement st = null;
        try {
            st = conn.prepareStatement("DELETE FROM usuario WHERE id = ?");
            st.setInt(1, id);
            st.executeUpdate();
        } finally {
            BancoDados.finalizarStatement(st);
            BancoDados.desconectar();
        }
    }

    public static void main(String[] args) throws SQLException, IOException {
        Connection conn = BancoDados.conectar();

        // Testing CRUD operations
        UsuarioDAO usuarioDAO = new UsuarioDAO(conn);

        // Create
        Usuario usuario = new Usuario();
        usuario.setNome("John Doe");
        usuario.setEmail("john.doe@example.com");
        usuario.setDataNascimento("1990-01-01");
        usuario.setGenero("Masculino");
        usuario.setFoto("johndoe.jpg");
        usuario.setSenha("password");
        usuario.setStatus(TipoStatus.ATIVO);
        usuarioDAO.cadastrar(usuario);

        // Read
        List<Usuario> usuarios = usuarioDAO.buscarTodos();
        for (Usuario u : usuarios) {
            System.out.println(u.getNome() + " - " + u.getEmail());
        }

        // Update
        usuario = usuarios.get(0);
        usuario.setNome("John Doe Updated");
        usuarioDAO.atualizar(usuario);

        // Delete
        usuarioDAO.excluir(usuario.getId());

        BancoDados.desconectar();
    }
}
